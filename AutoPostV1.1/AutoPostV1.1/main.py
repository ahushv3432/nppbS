# -*- coding: utf-8 -*-
# –û–°–ù–û–í–ù–û–ô –ë–û–¢ –ú—ã –≤ Telegram https://t.me/slivmens - @slivmens
from decimal import *
import telebot
import datetime
from telebot import types, apihelper
import sqlite3
import random
import time
import os,random,shutil,subprocess
import json
import keyboards
import requests
from datetime import datetime, timedelta
import chat_list
from datetime import date
from dateutil.relativedelta import relativedelta

TOKEN = '7306839295:AAF-wE8aiOtk4P00SZBpVco8ZcJ4SKLUJNQ'
bot = telebot.TeleBot(TOKEN)
admin = 7801306401


connection = sqlite3.connect('spam_baza.sqlite')
q = connection.cursor()

@bot.message_handler(commands=['start'])
def start_message(message):
	if message.chat.type == 'private':
		userid = str(message.chat.id)
		username = str(message.from_user.username)
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		q = q.execute('SELECT * FROM ugc_users WHERE id IS '+str(userid))
		row = q.fetchone()
		if row is None:
			q.execute("INSERT INTO ugc_users (id) VALUES ('%s')"%(userid))
			connection.commit()
		try:
			func.first_join(user_id=chat_id, username=username)
		except:
			pass
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		akkakk = q.execute(f'SELECT COUNT(id) FROM akk').fetchone()[0]
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		chat = q.execute(f'SELECT COUNT(id) FROM list_chat').fetchone()[0]
		colvo_send = q.execute(f'SELECT SUM(colvo_send) FROM list_chat').fetchone()[0]
		bot.send_photo(message.chat.id, open('rooster.jpg', 'rb'), caption=f'<b>üíô <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n'
			                                                                f'<b>üìò –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É:</b> <a href="https://teletype.in/@slivmens/2_GIdMEAgfs">–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è</a>\n\n'
			                                                                f'<b>üëë –ù–∞—à –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –±–æ–ª–µ–µ:</b> <code>{colvo_send}</code> <b>—Å–æ–æ–±—â–µ–Ω–∏–π</b>',parse_mode='HTML', reply_markup=keyboards.main)

		
@bot.message_handler(content_types=['text'])
def send_text(message):
	if message.chat.type == 'private':
		if message.text.lower() == '/admin':
			if message.chat.id == admin:
				connection = sqlite3.connect('spam_baza.sqlite')
				q = connection.cursor()
				all_user_count = q.execute(f'SELECT COUNT(id) FROM ugc_users').fetchone()[0]
				all_user_podpiska = q.execute(f'SELECT COUNT(id) FROM ugc_users WHERE data != "–ù–µ—Ç"').fetchone()[0]
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text=f'''üîç–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏''',callback_data=f'admin_search_user'),types.InlineKeyboardButton(text='üì©–†–∞—Å—Å—ã–ª–∫–∞',callback_data='send_sms_bot'))
				keyboard.add(types.InlineKeyboardButton(text='‚è±–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è',callback_data='timeupdate'))
				keyboard.add(types.InlineKeyboardButton(text='‚ôªÔ∏è–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã',callback_data='restartsssss'))
				keyboard.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å',callback_data='otmena_1'))
				bot.send_message(message.chat.id, f'''<b>üëÆüèª‚Äç‚ôÄÔ∏è –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {all_user_count}
<b>‚úÖ –ü–æ–¥–ø–∏—Å–æ–∫:</b> {all_user_podpiska}''',parse_mode='HTML', reply_markup=keyboard)



		elif message.text.lower() == 'üéõ –º–µ–Ω—é':
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚úâÔ∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥''',callback_data=f'akks'))
			keyboard.add(types.InlineKeyboardButton(text=f'''üëÆüèª‚Äç‚ôÄÔ∏è –ü—Ä–æ—Ñ–∏–ª—å''',callback_data=f'profale'),types.InlineKeyboardButton(text=f'''üìò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è''',callback_data=f'info'))
			keyboard.add(types.InlineKeyboardButton(text=f'''–°–∫—Ä—ã—Ç—å''',callback_data=f'otmena_1'))
			bot.send_message(message.chat.id, f'''<b>–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é ‚§µÔ∏è </b>''',parse_mode='HTML', reply_markup=keyboard)
			return

		

def new_data(message):
	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'))
	if message.text != 'üéõ –ú–µ–Ω—é':
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		chat_chat = q.execute(f'SELECT chat FROM ugc_users where id =  "{message.chat.id}"').fetchone()[0] 
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		if int(tipsend) == 4:
			q.execute(f"update list_chat set photo = '{message.text}' where id_str = '{chat_chat}'")
			connection.commit()
		if int(tipsend) == 1:
			q.execute(f"update list_chat set username = '{message.text}' where id_str = '{chat_chat}'")
			connection.commit()
		if int(tipsend) == 6:
			q.execute(f"update list_chat set dop_text = '{message.text}' where id_str = '{chat_chat}'")
			connection.commit()
		if int(tipsend) == 2:
			if int(message.text) >= 1:
				q.execute(f"update list_chat set time = '{message.text}' where id_str = '{chat_chat}'")
				connection.commit()
				clock_in_half_hour = datetime.now() + timedelta(minutes=(int(message.text)))
				q.execute(f"update list_chat set time_step = '{clock_in_half_hour.hour}:{clock_in_half_hour.minute}' where id_str = '{chat_chat}'")
				connection.commit()
		bot.send_message(message.chat.id, '‚úÖ –£—Å–ø–µ—à–Ω–æ',parse_mode='HTML', reply_markup=keyboard)
	else:
		bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∏–ª–∏',parse_mode='HTML', reply_markup=keyboard)

def new_data_m(message):
	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'))
	if message.text != 'üéõ –ú–µ–Ω—é':
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		chat_chat = q.execute(f'SELECT akk FROM ugc_users where id =  "{message.chat.id}"').fetchone()[0]
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		if int(tipsend11) == 4:
			q.execute(f"update list_chat set photo = '{message.text}' where akk = '{chat_chat}'")
			connection.commit()
		if int(tipsend11) == 1:
			q.execute(f"update list_chat set username = '{message.text}' where akk = '{chat_chat}'")
			connection.commit()
		bot.send_message(message.chat.id, '‚úÖ –£—Å–ø–µ—à–Ω–æ',parse_mode='HTML', reply_markup=keyboard)
	else:
		bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∏–ª–∏',parse_mode='HTML', reply_markup=keyboard)

def new_tig(message):
	if message.text != 'üéõ –ú–µ–Ω—é':
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		q.execute(f"update config set qiwi_token = '{message.text}' where id = '1'")
		connection.commit()
		bot.send_message(message.chat.id, '''‚úîÔ∏è Gotovo ! | /admin''',parse_mode='HTML')
	else:
		bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∏–ª–∏',parse_mode='HTML')


def send_photoorno(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		global text_send_all
		text_send_all = message.text
		msg = bot.send_message(message.chat.id, '<b>üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–¥–∏–∞</b>\n<code>–°–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø–æ–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–µ–¥–∏–∞:</code>\n1. @photo_uploader_bot',parse_mode='HTML',disable_web_page_preview = True)
		bot.register_next_step_handler(msg, admin_send_message_all_text_rus)


def admin_send_message_all_text_rus(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		global media
		media = message.text
		if int(tipsendSSSSS) == 1:
			msg = bot.send_photo(message.chat.id,str(media), "<b>–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ, –µ—Å–ª–∏ –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞–ø–∏—à–∏:</b> –î–∞\n<code>=================================</code>\n\n" + text_send_all,parse_mode='HTML')
			bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)
				
		if int(tipsendSSSSS) == 2:

			msg = bot.send_animation(chat_id=message.chat.id, animation=media, caption="<b>–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ, –µ—Å–ª–∏ –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞–ø–∏—à–∏:</b> –î–∞\n<code>=================================</code>\n\n" + text_send_all,parse_mode='HTML')
			bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)

		if int(tipsendSSSSS) == 3:

			media = f'<a href="{media}">.</a>'
			msg = bot.send_message(message.chat.id, f'''{text_send_all}
{media}
<code>=================================</code>
<b>–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ, –µ—Å–ª–∏ –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞–ø–∏—à–∏:</b> –î–∞''',parse_mode='HTML')
			bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)

def admin_send_message_all_text_da_rus(message):
	otvet = message.text
	colvo_send_message_users = 0
	colvo_dont_send_message_users = 0
	if message.text != '–û—Ç–º–µ–Ω–∞':	
		if message.text.lower() == '–î–∞'.lower():
			connection = sqlite3.connect('spam_baza.sqlite')
			with connection:	
				q = connection.cursor()
				bot.send_message(message.chat.id, '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞')
				if int(tipsendSSSSS) == 1: # –∫–∞—Ä—Ç–∏–Ω–∫–∞
					q.execute("SELECT * FROM ugc_users")
					row = q.fetchall()
					for i in row:
						jobid = i[0]

						time.sleep(0.9)
						reply = json.dumps({'inline_keyboard': [[{'text': '‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å', 'callback_data': f'–ì–ª–∞–≤–Ω–æ–µ'}]]})
						response = requests.post(
							url='https://api.telegram.org/bot{0}/{1}'.format(TOKEN, "sendPhoto"),
							data={'chat_id': jobid,'photo': str(media), 'caption': str(text_send_all),'reply_markup': str(reply),'parse_mode': 'HTML'}
						).json()
						if response['ok'] == False:
							colvo_dont_send_message_users = colvo_dont_send_message_users + 1
						else:
							colvo_send_message_users = colvo_send_message_users + 1;
					bot.send_message(message.chat.id, 'üì© –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: '+ str(colvo_send_message_users)+'\n‚õîÔ∏è –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '+ str(colvo_dont_send_message_users))	

				elif int(tipsendSSSSS) == 2: # –≥–∏—Ñ
					q.execute("SELECT * FROM spam_baza")
					row = q.fetchall()
					for i in row:
						jobid = i[0]

						time.sleep(0.9)
						reply = json.dumps({'inline_keyboard': [[{'text': '‚úñÔ∏è –°–∫—Ä—ã—Ç—å', 'callback_data': f'–ì–ª–∞–≤–Ω–æ–µ'}]]})
						response = requests.post(
							url='https://api.telegram.org/bot{0}/{1}'.format(TOKEN, "sendAnimation"),
							data={'chat_id': jobid,'animation': str(media), 'caption': str(text_send_all),'reply_markup': str(reply),'parse_mode': 'HTML'}
						).json()
						if response['ok'] == False:
							colvo_dont_send_message_users = colvo_dont_send_message_users + 1
						else:
							colvo_send_message_users = colvo_send_message_users + 1;
					bot.send_message(message.chat.id, 'üì© –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: '+ str(colvo_send_message_users)+'\n‚õîÔ∏è –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '+ str(colvo_dont_send_message_users))	


				elif int(tipsendSSSSS) == 3: # –≤–∏–¥–µ–æ
					q.execute("SELECT * FROM ugc_users")
					row = q.fetchall()
					for i in row:
						jobid = i[0]
						time.sleep(0.9)
						response = requests.post(
							url='https://api.telegram.org/bot{0}/{1}'.format(TOKEN, "sendMessage"),
							data={'chat_id': jobid, 'text': str(text_send_all) + str(media),'parse_mode': 'HTML'}
						).json()
						if response['ok'] == False:
							colvo_dont_send_message_users = colvo_dont_send_message_users + 1
						else:
							colvo_send_message_users = colvo_send_message_users + 1;
					bot.send_message(message.chat.id, 'üì© –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: '+ str(colvo_send_message_users)+'\n‚õîÔ∏è –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '+ str(colvo_dont_send_message_users))					

def add_money2(message):
   if message.text != '–û—Ç–º–µ–Ω–∞':
      connection = sqlite3.connect('spam_baza.sqlite')
      q = connection.cursor()
      q.execute(f"update ugc_users set balance = '{message.text}' where id = '{id_user_edit_bal1}'")
      connection.commit()
      bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ!  | /admin',parse_mode='HTML')
   else:
      bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∫—É | /admin',parse_mode='HTML')

def searchuser(message):
	if message.text.lower() != '–æ—Ç–º–µ–Ω–∞':
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		q.execute(f"SELECT * FROM ugc_users where id = '{message.text}'")
		row = q.fetchone()
		bot.send_message(message.chat.id, '<b>üîç –ò—â–µ–º...</b>',parse_mode='HTML', reply_markup=keyboards.main)
		if row != None:
			saasssss = q.execute(f"SELECT COUNT(id) FROM akk where user = '{row[0]}'").fetchone()[0]
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='‚ûï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å',callback_data=f'–¥–æ–±–∞–≤–∏—Ç—å–±–∞–ª–∞–Ω—Å_{row[0]}'))
			msg = bot.send_message(message.chat.id, f'''<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b>
<b>üîê –ù–∞—à –∫–∞–Ω–∞–ª:</b> @slivmens
<b>üÜî ID:</b> <code>{row[0]}</code>
<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> <code>{row[1]}</code>
<b>üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤:</b> <code>{saasssss}</code>
<b>üîê –ü–æ–¥–ø–∏—Å–∫–∞:</b> <code>{row[5]}</code>

''',parse_mode='HTML',reply_markup=keyboard)
		else:
			bot.send_message(message.chat.id, '<b>–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> | /admin',parse_mode='HTML')
	else:
		bot.send_message(message.chat.id, '<b>–û—Ç–º–µ–Ω–∏–ª–∏</b> | /admin',parse_mode='HTML')

def add_proxi(message):
	if message.text != 'üéõ –ú–µ–Ω—é':
		try:
			proxi = message.text
			login_prox = proxi.split('@')[0].split(':')[0]
			pass_prox = proxi.split('@')[0].split(':')[1]
			ip_prox = proxi.split('@')[1].split(':')[0]
			port_prox = proxi.split('@')[1].split(':')[1]
			connection = sqlite3.connect('spam_baza.sqlite')
			q = connection.cursor()
			akkkkkkk = q.execute(f'SELECT akk FROM ugc_users where id =  "{message.chat.id}"').fetchone()[0]
			q.execute(f"update akk set proxi = '{proxi}' where id = '{akkkkkkk}'")
			connection.commit()
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'))
			bot.send_message(message.chat.id,F'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –ø—Ä–æ–∫—Å–∏''',parse_mode='HTML', reply_markup=keyboard)
		except Exception as e:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'))
			bot.send_message(message.chat.id,f'‚úñÔ∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞',parse_mode='HTML', reply_markup=keyboard)
	else:
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'))
		bot.send_message(message.chat.id, '‚úîÔ∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é',reply_markup=keyboard)


def add_autotext(message):
	if message.text != 'üéõ –ú–µ–Ω—é':
		try:
			connection = sqlite3.connect('spam_baza.sqlite')
			q = connection.cursor()
			akkkkkkk = q.execute(f'SELECT akk FROM ugc_users where id =  "{message.chat.id}"').fetchone()[0]
			q.execute(f"update akk set text = '{message.text}' where id = '{akkkkkkk}'")
			connection.commit()
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'))
			bot.send_message(message.chat.id,F'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏''',parse_mode='HTML', reply_markup=keyboard)
		except Exception as e:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'))
			bot.send_message(message.chat.id,f'‚úñÔ∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞',parse_mode='HTML', reply_markup=keyboard)
	else:
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫'))
		bot.send_message(message.chat.id, '‚úîÔ∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é',reply_markup=keyboard)


def proxis(id_akk):
    connection = sqlite3.connect('spam_baza.sqlite')
    q = connection.cursor()
    proxi = q.execute(f'SELECT proxi FROM akk where id =  "{id_akk}"').fetchone()[0]
    return proxi

@bot.callback_query_handler(func=lambda call:True)
def podcategors(call):

	if call.data == 'akks':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('spam_baza.sqlite')	
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		row = q.execute(f"SELECT * FROM akk where user = '{call.message.chat.id}'").fetchall()
		keyboard = types.InlineKeyboardMarkup()
		for i in row:
			keyboard.add(types.InlineKeyboardButton(text=i[2],callback_data=f'—Å–ø–∏—Å–æ–∫{i[0]}'))
		keyboard.add(types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',callback_data=f'–¥–æ–±–∞–≤–∏—Ç—å–∞–∫–∫–∞—É–Ω—Ç'))
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
		bot.send_message(call.from_user.id,  f'''–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π ‚§µÔ∏è''',parse_mode='HTML', reply_markup=keyboard)


	if call.data == 'timeupdate':
		bot.send_message(call.from_user.id, 'Load' ,parse_mode='HTML')
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		clock_in_half_hour = datetime.now()
		q.execute(f"SELECT * FROM list_chat where status = 'NoSend' and time >= '1'")
		row = q.fetchall()
		for i in row:
			try:
				ttt = datetime.now() + timedelta(minutes=(int(i[4])))
				q.execute(f"update list_chat set time_step = '{ttt.hour}:{ttt.minute}' where id_str = '{i[0]}'")
				connection.commit()
			except Exception as e:
				q.execute(f"DELETE FROM list_chat where id_str = '{i[0]}'")
				connection.commit()
	
		bot.send_message(call.from_user.id, f'''‚úîÔ∏è Time update /admin''',parse_mode='HTML')

	if call.data == 'restartsssss':
		bot.send_message(call.message.chat.id, '<b>Reboot...</b>',parse_mode='HTML')
		cmd = 'systemctl restart avp'
		cmd1 = 'systemctl restart avp_autos'
		cmd2 = 'systemctl restart avp_bot_auch'
		cmd3 = 'systemctl restart avp_ids_spam'
		cmd4 = 'systemctl restart avp_send_1'
		subprocess.Popen(cmd3, shell=True)
		subprocess.Popen(cmd1, shell=True)
		subprocess.Popen(cmd2, shell=True)
		subprocess.Popen(cmd4, shell=True)
		subprocess.Popen(cmd, shell=True)


	
	if call.data[:6] == '—Å–ø–∏—Å–æ–∫':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		datas = q.execute(f"SELECT data FROM ugc_users where id = '{call.message.chat.id}'").fetchone()[0]
		if str(datas) != str('–ù–µ—Ç'):
			q.execute(f"update ugc_users set akk = '{call.data[6:]}' where id = '{call.message.chat.id}'")
			connection.commit()
			akk_akk = q.execute(f'SELECT akk FROM ugc_users where id =  "{call.message.chat.id}"').fetchone()[0]
			proxi = q.execute(f'SELECT proxi FROM akk where id =  "{akk_akk}"').fetchone()[0]
			keyboard = types.InlineKeyboardMarkup()
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			rows = q.execute(f"SELECT * FROM list_chat  where akk = '{akk_akk}'").fetchall()
			btns = []
			for i in range(len(rows)):
				btns.append(types.InlineKeyboardButton(text=rows[i][3], callback_data=f'servis_{rows[i][0]}'))
			while btns != []:
				try:
					keyboard.add(
						btns[0],
						btns[1]
						)
					del btns[1], btns[0]
				except:
					keyboard.add(btns[0])
					del btns[0]

			keyboard.add(types.InlineKeyboardButton(text=f'''üîÑ  –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞''',callback_data=f'loading_akk'))
			keyboard.add(types.InlineKeyboardButton(text=f'''üåè –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏''',callback_data=f'—Å–º–µ–Ω–∞–ø—Ä–æ–∫—Å–∏'),types.InlineKeyboardButton(text=f'''üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç''',callback_data=f'del_akk'))
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'),types.InlineKeyboardButton(text=f'''üìö –ú—É–ª—å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞''',callback_data=f'Multi'))
			bot.send_message(call.message.chat.id, f'''<b>üåê –ü—Ä–æ–∫—Å–∏:</b> <code>{proxi}</code>''',parse_mode='HTML', reply_markup=keyboard)
		else:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'),)
			bot.send_message(call.message.chat.id, f'''‚úñÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç''',parse_mode='HTML', reply_markup=keyboard)


	if call.data == 'loading_akk':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		bot.send_message(call.message.chat.id, f'üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ.',reply_markup=keyboards.main)
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		akk_akk = q.execute(f'SELECT akk FROM ugc_users where id =  "{call.message.chat.id}"').fetchone()[0]
		www = chat_list.mainssssss(akk_akk, call.message.chat.id)
		if str(www) == str('ok'):
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'))
			bot.send_message(call.message.chat.id, f'''‚úîÔ∏è –ß–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.

‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–æ—Ç: @ZyzLogBot''',reply_markup=keyboard)
		else:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'))
			bot.send_message(call.message.chat.id, f'‚úñÔ∏è –û—à–∏–±–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.',reply_markup=keyboard)


	if call.data == '—Å–º–µ–Ω–∞–ø—Ä–æ–∫—Å–∏':
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è''',url='https://teletype.in/@slivmens/HpuJVJUGqkz'),types.InlineKeyboardButton(text=f'''‚ûï –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏''',url='https://www.proxy.house/?r=285260'))
		msg = bot.send_message(call.message.chat.id,'‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: login:password@ip:port (SOCKS)',parse_mode='HTML', reply_markup=keyboard)
		bot.register_next_step_handler(msg, add_proxi)

		
	if call.data == 'del_akk':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		akk_akkass = q.execute(f'SELECT akk FROM ugc_users where id =  "{call.message.chat.id}"').fetchone()[0]
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute(f"DELETE FROM list_chat where akk = '{akk_akkass}'")
		connection.commit()
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		q.execute(f"DELETE FROM akk where id = '{akk_akkass}'")
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'))
		bot.send_message(call.from_user.id,  f'''‚úîÔ∏è –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω''',parse_mode='HTML', reply_markup=keyboard)


	if call.data == '–¥–æ–±–∞–≤–∏—Ç—å–∞–∫–∫–∞—É–Ω—Ç':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('spam_baza.sqlite')	
		q = connection.cursor()
		datas = q.execute(f"SELECT data FROM ugc_users where id = '{call.message.chat.id}'").fetchone()[0]
		if str(datas) != str('–ù–µ—Ç'):
			code = call.message.chat.id
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''üåê –ü–µ—Ä–µ–π—Ç–∏''',url=f'https://t.me/slivmens?start={code}'))
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'))
			bot.send_message(call.message.chat.id, f'''‚ÑπÔ∏è –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç  <a href="https://t.me/slivmens?start={code}">—Å—Å—ã–ª–∫–µ</a> –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.''',parse_mode='HTML', reply_markup=keyboard)
		else:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'))
			bot.send_message(call.from_user.id,  f'''‚úñÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏''',parse_mode='HTML', reply_markup=keyboard)





	if call.data[:7] == 'servis_':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('spam_baza.sqlite')	
		q = connection.cursor()
		q.execute(f"update ugc_users set chat = '{call.data[7:]}' where id = '{call.message.chat.id}'")
		connection.commit()
		chat_chat = q.execute(f'SELECT chat FROM ugc_users where id =  "{call.message.chat.id}"').fetchone()[0]
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='üñç–°–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç',callback_data=f'–Ω–∞—Å—Ç—Ä–æ–π–∫–∞{1}'))
		keyboard.add(types.InlineKeyboardButton(text='üåÖ–°–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É',callback_data=f'–Ω–∞—Å—Ç—Ä–æ–π–∫–∞{4}'),types.InlineKeyboardButton(text='‚è∞–°–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É',callback_data=f'–Ω–∞—Å—Ç—Ä–æ–π–∫–∞{2}'))
		keyboard.add(types.InlineKeyboardButton(text='‚óÄÔ∏è–ù–∞–∑–∞–¥',callback_data=f'akks'),types.InlineKeyboardButton(text='üóë–£–¥–∞–ª–∏—Ç—å',callback_data=f'–Ω–∞—Å—Ç—Ä–æ–π–∫–∞{3}'))
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		row = q.execute(f"SELECT * FROM list_chat where id_str = '{chat_chat}'").fetchone()
		bot.send_message(call.from_user.id,  f'''<b>üÜî:</b> <code>{row[1]}</code>
<b>\nüìú –¢–µ–∫—Å—Ç:</b> <code>{row[2]}</code>
<b>üåÑ –ö–∞—Ä—Ç–∏–Ω–∫–∞:</b> <code>{row[6]}</code> (—Å—Å—ã–ª–∫–∞)
<b>‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞:</b> <code>{row[4]}</code> –º–∏–Ω—É—Ç
<b>üì® –û—Ç–ø—Ä–∞–≤–∫–∞:</b> <code>{row[5]}</code>''',parse_mode='HTML', reply_markup=keyboard)
		clock_in_half_hour = datetime.now()

	if call.data == 'send_sms_bot':
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='üì∏ –° –∫–∞—Ä—Ç–∏–Ω–æ–∫–π',callback_data=f'–†–∞—Å—Å—ã–ª–∫–∞{1}'))
		keyboard.add(types.InlineKeyboardButton(text='üì± –° –≥–∏—Ñ',callback_data=f'–†–∞—Å—Å—ã–ª–∫–∞{2}'))
		keyboard.add(types.InlineKeyboardButton(text='üé• –° –≤–∏–¥–µ–æ',callback_data=f'–†–∞—Å—Å—ã–ª–∫–∞{3}'))
		bot.send_message(call.from_user.id, f'''<b>‚ö†Ô∏è –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>''',parse_mode='HTML', reply_markup=keyboard)

	if call.data[:8] == '–†–∞—Å—Å—ã–ª–∫–∞':
		global tipsendSSSSS
		tipsendSSSSS = call.data[8:]
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''–û—Ç–º–µ–Ω–∞''',callback_data=f'otmena_1'))
		msg= bot.send_message(call.message.chat.id, "<b>üñç –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>",parse_mode='HTML', reply_markup=keyboard)
		bot.register_next_step_handler(msg, send_photoorno)	


	if call.data == 'Multi':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='üñç–°–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç',callback_data=f'–º—É–ª—å—Ç–∏{1}'))
		keyboard.add(types.InlineKeyboardButton(text='üåÑ–°–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É',callback_data=f'–º—É–ª—å—Ç–∏{4}'))
		keyboard.add(types.InlineKeyboardButton(text='‚óÄÔ∏è–ù–∞–∑–∞–¥',callback_data=f'akks'))
		bot.send_message(call.from_user.id,  f'''<b>–°–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞ ‚§µÔ∏è</b>''',parse_mode='HTML', reply_markup=keyboard)

	

	
	if call.data[:6] == '–º—É–ª—å—Ç–∏':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		global tipsend11
		tipsend11 = call.data[6:]
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		if int(tipsend11) == 1:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å',callback_data='otmena_1'))
			msg= bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>",parse_mode='HTML', reply_markup=keyboard)
			bot.register_next_step_handler(msg, new_data_m)
		if int(tipsend11) == 4:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å',callback_data='otmena_1'))
			msg= bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>",parse_mode='HTML', reply_markup=keyboard)
			bot.register_next_step_handler(msg, new_data_m)


	elif call.data[:9] == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		global tipsend
		tipsend = call.data[9:]
		print(tipsend)
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		if int(tipsend) == 1:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å',callback_data='otmena_1'))
			msg= bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>",parse_mode='HTML', reply_markup=keyboard)
			bot.register_next_step_handler(msg, new_data)
		if int(tipsend) == 2:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å',callback_data='otmena_1'))
			msg= bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>",parse_mode='HTML', reply_markup=keyboard)
			bot.register_next_step_handler(msg, new_data)
		if int(tipsend) == 3:
			chat_chat = q.execute(f'SELECT chat FROM ugc_users where id =  "{call.message.chat.id}"').fetchone()[0]
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute(f"DELETE FROM list_chat where id_str = '{chat_chat}'")
			connection.commit()
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'))
			bot.send_message(call.from_user.id,  '''‚úÖ –£—Å–ø–µ—à–Ω–æ''',parse_mode='HTML', reply_markup=keyboard)
		if int(tipsend) == 4:
			msg= bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:</b>",parse_mode='HTML')
			bot.register_next_step_handler(msg, new_data)
		if int(tipsend) == 5:
			keyboard = types.InlineKeyboardMarkup()
			akk_akk = q.execute(f'SELECT akk FROM ugc_users where id =  "{call.message.chat.id}"').fetchone()[0]
			print(akk_akk)
			keyboard = types.InlineKeyboardMarkup()
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			rows = q.execute(f"SELECT * FROM list_chat  where akk = '{akk_akk}'").fetchall()
			btns = []
			for i in range(len(rows)):
				btns.append(types.InlineKeyboardButton(text=rows[i][3], callback_data=f'servis_{rows[i][0]}'))

			while btns != []:
				try:
					keyboard.add(
						btns[0],
						btns[1]
						)

					del btns[1], btns[0]

				except:
					keyboard.add(btns[0])
					del btns[0]
			clock_in_half_hour = datetime.now()
			keyboard.add(types.InlineKeyboardButton(text=f'''üîÑ  –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞''',callback_data=f'loading_akk'))
			keyboard.add(types.InlineKeyboardButton(text=f'''üåè –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏''',callback_data=f'—Å–º–µ–Ω–∞–ø—Ä–æ–∫—Å–∏'),types.InlineKeyboardButton(text=f'''üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç''',callback_data=f'del_akk'))
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'akks'),types.InlineKeyboardButton(text=f'''üìö –ú—É–ª—å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞''',callback_data=f'Multi'))
		if int(tipsend) == 6:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å',callback_data='otmena_1'))
			msg= bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>",parse_mode='HTML', reply_markup=keyboard)
			bot.register_next_step_handler(msg, new_data)
				
	elif call.data == 'otmena_1':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)

	elif call.data == '–ì–ª–∞–≤–Ω–æ–µ':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''‚úâÔ∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥''',callback_data=f'akks'))
		keyboard.add(types.InlineKeyboardButton(text=f'''üëÆüèª‚Äç‚ôÄÔ∏è –ü—Ä–æ—Ñ–∏–ª—å''',callback_data=f'profale'),types.InlineKeyboardButton(text=f'''üìò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è''',callback_data=f'info'))
		keyboard.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å',callback_data='otmena_1'))
		bot.send_message(call.message.chat.id, f'''<b>–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é ‚§µÔ∏è </b>''',parse_mode='HTML', reply_markup=keyboard)


	elif call.data == 'profale':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		balans = q.execute(f"SELECT balance FROM ugc_users where id = '{call.message.chat.id}'").fetchone()[0]
		data = q.execute(f"SELECT data FROM ugc_users where id = '{call.message.chat.id}'").fetchone()[0]
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''üîë –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å''',callback_data='–ü–æ–ø–æ–ª–Ω–∏—Ç—å'))
		keyboard.add(types.InlineKeyboardButton(text=f'''‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É''',callback_data='–û—Ñ–æ—Ä–º–∏—Ç—å'))
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
		bot.send_message(call.message.chat.id, f'''
<b>üë§{call.message.chat.first_name} –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>!

üÜî Id: <code>{call.message.chat.id}</code>
üí∞ –ë–∞–ª–∞–Ω—Å: <code>{balans}</code>
üîê –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: <code>{data}</code>''',parse_mode='HTML', reply_markup=keyboard)

	elif call.data == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''‚úÖ QIWI / CARD / BTC''',callback_data='–±—Ç–∫—á–µ–∫'))
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'profale'))
		bot.send_message(call.message.chat.id, f'''<b>–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–±–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚§µÔ∏è </b>''',parse_mode='HTML', reply_markup=keyboard)

	elif call.data == '–±—Ç–∫—á–µ–∫':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
		msg = bot.send_message(call.message.chat.id,'''‚ùóÔ∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ, –ø—Ä–æ—à—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π @slivmens –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.''', reply_markup=keyboard, parse_mode='HTML')

	elif call.data == '–û—Ñ–æ—Ä–º–∏—Ç—å':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''ü§ç 1 –¥–µ–Ω—å / 0—Ä [test]''',callback_data=f'–ø–æ–¥–ø–∏—Å–∫–∞1'))
		keyboard.add(types.InlineKeyboardButton(text=f'''üíô 1 –º–µ—Å—è—Ü / 100—Ä''',callback_data=f'–ø–æ–¥–ø–∏—Å–∫–∞2'))
		keyboard.add(types.InlineKeyboardButton(text=f'''‚ù§Ô∏è 3 –º–µ—Å—è—Ü / 200—Ä''',callback_data=f'–ø–æ–¥–ø–∏—Å–∫–∞3'))
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
		bot.send_message(call.message.chat.id, '''<b>–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ ‚§µÔ∏è </b>''',parse_mode='HTML', reply_markup=keyboard)

	elif call.data[:8] == '–ø–æ–¥–ø–∏—Å–∫–∞':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		temp_id = call.data[8:]
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		bal_us = q.execute(f"SELECT balance FROM ugc_users where id = '{call.from_user.id}'").fetchone()[0]
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
		if str(temp_id) == '1':
			if int(bal_us) >= int(0):
				q.execute("update ugc_users set balance = balance - " + str(0)+" where id = " +str(call.from_user.id))
				connection.commit()
				tomorrow = datetime.now() + timedelta(days=1)
				tomorrow_formatted = tomorrow.strftime('%d/%m/%Y')
				print(tomorrow_formatted)
				q.execute(f"update ugc_users set data = '{tomorrow_formatted}' where id = '{call.from_user.id}'")
				connection.commit()
				bot.send_message(call.message.chat.id, '''‚úîÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞''',parse_mode='HTML', reply_markup=keyboard)
			else:
				bot.send_message(call.message.chat.id, '''‚úñÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å''',parse_mode='HTML', reply_markup=keyboard)

		if str(temp_id) == '2':
			if int(bal_us) >= int(100):
				q.execute("update ugc_users set balance = balance - " + str(100)+" where id = " +str(call.from_user.id))
				connection.commit()
				tomorrow = datetime.now() + timedelta(days=30)
				tomorrow_formatted = tomorrow.strftime('%d/%m/%Y')
				q.execute(f"update ugc_users set data = '{tomorrow_formatted}' where id = '{call.from_user.id}'")
				connection.commit()
				bot.send_message(call.message.chat.id, '''‚úîÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞''',parse_mode='HTML', reply_markup=keyboard)
			else:
				bot.send_message(call.message.chat.id, '''‚úñÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å''',parse_mode='HTML', reply_markup=keyboard)

		if str(temp_id) == '3':
			if int(bal_us) >= int(200):
				q.execute("update ugc_users set balance = balance - " + str(200)+" where id = " +str(call.from_user.id))
				connection.commit()
				tomorrow = datetime.now() + timedelta(days=90)
				tomorrow_formatted = tomorrow.strftime('%d/%m/%Y')
				q.execute(f"update ugc_users set data = '{tomorrow_formatted}' where id = '{call.from_user.id}'")
				connection.commit()
				bot.send_message(call.message.chat.id, '''‚úîÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞''',parse_mode='HTML', reply_markup=keyboard)
			else:
				bot.send_message(call.message.chat.id, '''‚úñÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å''',parse_mode='HTML', reply_markup=keyboard)


	elif call.data == 'info':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		akkakk = q.execute(f'SELECT COUNT(id) FROM akk').fetchone()[0]
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		chat = q.execute(f'SELECT COUNT(id) FROM list_chat').fetchone()[0]
		colvo_send = q.execute(f'SELECT SUM(colvo_send) FROM list_chat').fetchone()[0]
		connection = sqlite3.connect('spam_baza.sqlite')
		q = connection.cursor()
		all_user_count = q.execute(f'SELECT COUNT(id) FROM ugc_users').fetchone()[0]
		all_user_podpiska = q.execute(f'SELECT COUNT(id) FROM ugc_users WHERE data != "–ù–µ—Ç"').fetchone()[0]
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''üßë‚Äçüîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞''',url=f'https://t.me/slivmens'))
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ì–ª–∞–≤–Ω–æ–µ'))
		bot.send_message(call.message.chat.id, f'''üìò –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É: <a href="https://teletype.in/@slivmens/2_GIdMEAgfs">–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è</a>

<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b> 
<b>‚îóüëÆüèª‚Äç‚ôÄÔ∏è –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{all_user_count}</code> 
<b>‚îóüë•–í—Å–µ–≥–æ –ê–∫–∫–∞—É–Ω—Ç–æ–≤:</b> <code>{akkakk}</code>
<b>‚îóüìú –í—Å–µ–≥–æ –ß–∞—Ç–æ–≤:</b> <code>{chat}</code>
<b>‚îóüì® –í—Å–µ–≥–æ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{colvo_send}</code>''',parse_mode='HTML', reply_markup=keyboard, disable_web_page_preview=True)

	elif call.data[:17] == 'admin_search_user':
		msg = bot.send_message(call.message.chat.id, f'<b>–í–≤–µ–¥–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg,searchuser)

	elif call.data[:15] == '–¥–æ–±–∞–≤–∏—Ç—å–±–∞–ª–∞–Ω—Å_':
		global id_user_edit_bal1
		id_user_edit_bal1 = call.data[15:]
		msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É: ',parse_mode='HTML')
		bot.register_next_step_handler(msg, add_money2)

bot.infinity_polling(timeout=10, long_polling_timeout = 5)
